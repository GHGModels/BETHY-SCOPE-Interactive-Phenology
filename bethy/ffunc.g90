!------------------------------------------------------------------
! set the number of control variables
!------------------------------------------------------------------
SUBROUTINE initmod( nvar )
  USE mo_namelist
  USE mo_constants
  USE costf, ONLY: n_sites, init_flux
  USE mo_grid, ONLY: sp, nrs
  USE mo_config

  IMPLICIT NONE

  INTEGER, INTENT(out) :: nvar

  ! local variables
  INTEGER :: i !index varaibles


  integer ifail
  logical cold
  integer jmin, jmax, nupdate, ifunc, nn
  real, dimension(57) :: p
  real :: fc

  ! local variables
  INTEGER :: dumi1
  INTEGER, DIMENSION(3) :: dumi2
  REAL, DIMENSION(2) :: dumf
  CHARACTER(len=80) :: header
      
      
      
  WRITE(*,*) ''
  WRITE(*,*) '**************************************************'
  WRITE(*,*) '*                      BETHY                     *'
  WRITE(*,*) '**************************************************'
  WRITE(*,*) '' 


! .. read namelist variables
  CALL get_namelist

!==============================================================
! option to read control vector from optimisation
!==============================================================
  call instoref( nn, ifunc, fc, nupdate, jmin, jmax, cold, ifail )
 
  if (cold) then
     print *, 'control variables are set by initfunc'
  else
     call dostoref( 57, p, .false., 1 , 'OPWARMD' )
     print *, 'control variables read from OPWARMD'
  endif

! initialize eddy data
  n_sites = init_flux(fluxfile, year0_site, year1_site, fluxdir)
  IF (n_sites>0) THEN

     nrs = year1_site - year0_site + 1

     OPEN (120,file=site_file,status='unknown',form='formatted')
     READ (120,*) header

     sp = 0 
     DO i = 1, n_sites
        dumi2 = 0
        READ(120,'(2f7.2,i6,3i3,3f3.0)') dumf, dumi1, dumi2(:)
        WHERE(dumi2>0) dumi2 = 1
        sp = sp + SUM(dumi2)
     ENDDO
     CLOSE(120)

! initialise site specific values
     CALL config_sites (site_file, n_sites) 
     
     CALL init_config (n_sites) 


     nvar = sp

  ENDIF

  
END SUBROUTINE initmod


SUBROUTINE setfunc( n, m )
  IMPLICIT NONE
  INTEGER n, m
  CALL initmod( n )
  m = NPADM
END SUBROUTINE setfunc


SUBROUTINE initfunc( n, x )
  IMPLICIT NONE
  INTEGER n
  REAL    x(n)


  OPEN(900,file='cs.bin',form='unformatted')
  READ(900) x
  CLOSE(900)

END SUBROUTINE initfunc


SUBROUTINE func( n, x, m, y )
!********************************************************************
!
! input  : N      amount of parameters
!          X      array of parameters
!
! output : Y      prognostic values
!
!********************************************************************
  USE mo_constants
  USE mo_diagnostics
  USE mo_namelist
  USE mo_grid, ONLY: sp, nrs
  USE costf, ONLY: n_sites

  IMPLICIT NONE

  INTEGER :: n, m, outint, scale, i, j, a
  REAL    :: x(n), y(m)
  REAL, ALLOCATABLE, DIMENSION(:)  :: lfac

  outint = 366
  scale = 1

  print*,'nrs ', nrs, shape(rnep)
  
  CALL diagnostics_allocate(nrs,outint, n_sites, sp)
  allocate (lfac(sp))

  OPEN(901,file='npp.bin',form='unformatted')
  READ(901) rnpp
  CLOSE(901)

  OPEN(902,file='resfv.bin',form='unformatted')
  READ(902) resfv
  CLOSE(902)

  OPEN(903,file='ressv.bin',form='unformatted')
  READ(903) ressv
  CLOSE(903)

  OPEN(904,file='lfac.bin',form='unformatted')
  READ(904) lfac
  CLOSE(904)

  CALL budget(n_sites, sp, nrs, outint, scale, x, lfac, rnpp, resfv, ressv, ress, resf, rnep)

  y = 0
  j = 1
  do i = 1, n_sites
     do a = 0, 3
        y(j) = sum(sum(rnep(1+a*10:a*10+10,:,i),2))/10.
        j = j + 1
     enddo	
  enddo

 CALL diagnostics_deallocate(nrs, outint, n_sites, sp)
 deallocate (lfac)

END SUBROUTINE func


SUBROUTINE postfunc( n, x, m, y )
!********************************************************************
! postprocessing for Prognostic function
!********************************************************************
  IMPLICIT NONE

  INTEGER :: n, m
  REAL    :: x(n), y(m)
  INTEGER :: j

      PRINT *,'**************************************'
      PRINT *,'***   Function Components           **'
      PRINT *,'**************************************'
      DO J = 1,M
         PRINT '(X,I4,20(X,E12.6))', J, Y(J)
      ENDDO

END SUBROUTINE postfunc

SUBROUTINE POSTJACCOL  (nvar, x, m, y, g_y, col, ncol )
  USE mo_namelist, ONLY: outdir
  IMPLICIT NONE
  INTEGER nvar, m, ncol, col(ncol)
  REAL   g_y(ncol,m)
  REAL   x(nvar)
  REAL   y(m)

  ! local variables
  INTEGER i_stat, i_year, i_month , i
  CHARACTER (len=80) :: ofname
  INTEGER icol ,j

  PRINT *
  PRINT *,    '**************************************************'
  PRINT '(A)',' Jacobian columns'
  PRINT *,    '**************************************************'
  PRINT '(A)', ' col row       x(col)       y(row)  dy(row)/dx(col)'
  DO icol = 1, ncol
     DO j = 1, m
        PRINT '(2i4,2(1x,e12.6),(8x,e12.6)  )',&
             & col(icol),j,x(col(icol)),y(j),g_y(icol,j)
     END DO
  END DO
  PRINT *
! save jacobian 
   ofname=TRIM(outdir)//'fjaccol.dat'
   OPEN (38,file=ofname,status='unknown',form='unformatted')
   WRITE(38) g_y
   CLOSE(38)
END SUBROUTINE POSTJACCOL

!================================================
! The subroutine "POSTJACREV" is called
! after computation of full Jacobian in reverse mode
!================================================
SUBROUTINE POSTJACREV(  n, x, m, y, adx)
  USE mo_namelist, ONLY: outdir
  IMPLICIT NONE
  INTEGER n, m
  REAL   adx(m,n)
  REAL   x(n)
  REAL   y(m)
  
  INTEGER i,j
  CHARACTER (len=80) :: ofname

  PRINT *
  PRINT *,    '**************************************************'
  PRINT '(A)',' Jacobian'
  PRINT *,    '**************************************************'
  PRINT '(A)', ' col row       x(col)       y(row)  dy(row)/dx(col)'
  DO i = 1, n
     DO j = 1, m
        PRINT '(2i4,2(1x,e12.6),(5x,e12.6)  )',&
             &           i,j,x(i),y(j),adx(j,i)
     END DO
  END DO
  ! save hessian
   ofname=TRIM(outdir)//'pjaccol.bin'
   OPEN (38,file=ofname,status='unknown',form='unformatted')
   WRITE(38) adx
   CLOSE(38)

  PRINT *
END SUBROUTINE POSTJACREV

!================================================
! The subroutine "POSTJACFWD" is called
! after computation of full Jacobian in forward mode
!================================================
SUBROUTINE POSTJACFWD(  n, x, m, y, g_y)
  IMPLICIT NONE
  INTEGER n, m
  REAL   g_y(n,m)
  REAL   x(n)
  REAL   y(m)
  
  INTEGER i,j
  PRINT *
  PRINT *,    '**************************************************'
  PRINT '(A)',' Jacobian'
  PRINT *,    '**************************************************'
  PRINT '(A)', ' col row       x(col)       y(row)  dy(row)/dx(col)'
  DO i = 1, n
     DO j = 1, m
        PRINT '(2i4,2(1x,e12.6),(5x,e12.6)  )',&
             &           i,j,x(i),y(j),g_y(i,j)
     END DO
  END DO
  PRINT *
END SUBROUTINE POSTJACFWD
